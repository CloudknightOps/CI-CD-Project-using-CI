version: 2.1
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend 
            npm install
            npm run build 
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend 
            npm install
            npm run build
            
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout 
      - restore_cache: 
          keys: [frontend-test]
      - run:
          name: front-end test
          command: |
             cd frontend
             npm install
             npm run test 

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: backend test
          command: |
             cd backend 
             npm install
             npm run test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout 
      - restore_cache: 
          keys: [front-scan]
      - run:
          name: front-end scan
          command: |
             cd frontend 
             npm install 
             npm audit fix --audit-level=citical --force 
             npm audit --audit-level=critical  

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - run: 
          name: backend scan 
          command: |
             cd backend 
             npm install 
             npm audit fix --force 
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli 
    steps:
      - checkout 
      - run:
          name: Install gzip and tar
          command: yum install -y tar gzip 
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file backend.yml \
              #--tags project=udapeople \
              # --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              # --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file frontend.yml \
              #--tags project=udapeoplefront \
              # --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              # --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              exit 1
      - run:
          name: Add back-end ip to ansible inventory
          working_directory: .
          command: |
            cd ./.circleci/ansible
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text >>inventory.txt
            cat inventory
      - persist_to_workspace:
          root: .
          paths:
            - ./.circleci/ansible/inventory.txt   
          
      


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend: 
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch]
                
