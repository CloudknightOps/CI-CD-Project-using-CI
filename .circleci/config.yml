version: 2.1

commands:
  destroy_environment: 
    description: Destroy Cloudformation stack and Infrastructure 
    parameters:
      id:
        type: string
    steps:
      - run:
          name: Destroy udapeople backend cfn stack 
          when: on_fail
          command: |
            aws cloudformation delete-stack  --stack-name  "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Destroy udapeople frontend cfn stack 
          when: on_fail
          command:
            aws cloudformation delete-stack  --stack-name  "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
  
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
      id:
    steps:
      - run:
          name: Revert migrations
          working_directory: ./backend
          command: |
            SUCCESS=$(curl https://keyvalue.immanuel.co/api/keyValue/GetValue/n2dtyfw3/DB_MIGRATION_<< parameter.workflow_id >>)

            if [["$SUCCESS" == 1]]
            then
               npm run migrations:revert
            fi
          when: on_fail
            
            



jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend 
            npm install
            npm run build 
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend 
            npm install
            npm run build
            
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout 
      - restore_cache: 
          keys: [frontend-test]
      - run:
          name: front-end test
          command: |
             cd frontend
             npm install
             npm run test 

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: backend test
          command: |
             cd backend 
             npm install
             npm run test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout 
      - restore_cache: 
          keys: [front-scan]
      - run:
          name: front-end scan
          command: |
             cd frontend 
             npm install 
             npm audit fix --audit-level=citical --force 
             npm audit --audit-level=critical  

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - run: 
          name: backend scan 
          command: |
             cd backend 
             npm install 
             npm audit fix --force 
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli 
    steps:
      - checkout 
      - run:
          name: Install gzip and tar
          command: yum install -y tar gzip 
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeoplefront \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              
      - run:
          name: Add back-end ip to ansible inventory
          working_directory: .
          command: |
            cd ./.circleci/ansible
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text >> inventory.txt
            cat inventory.txt
      - persist_to_workspace:
          root: .
          paths:
            - ./.circleci/ansible/inventory.txt 

  configure-infrastructure:
    environment:
      - ANSIBLE_HOST_KEY_CHECKING: False
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [15:70:09:55:91:96:ae:52:1b:55:c0:9f:48:9d:26:2a]
      - attach_workspace:
           at: .
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible  
      - run:
          name: Install ssh
          command: |
              apk add --update openssh
      - run:
          name: Configure server
          command: |
            ansible-playbook -i ./.circleci/ansible/inventory.txt  ./.circleci/ansible/configure-server.yml
          

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend 
            npm install 
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully"  ~/project/backendend/migrations_dump.txt
            then 
                curl --header "content-lenght:0" -x POST https://keyvalue.immanuel.co/api/KeyVal/updateValue/n2dtyfw3/name/Oghenegare
            else
                curl --header "content-length:0" -x POST https://keyvalue.immanuel.co/api/KeyVal/updateValue/n2dtyfw3/name/Oghenegare 
            fi
      
        

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout 
      - attach_workspace:
          at: .

      - run:
          name: Install dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less 
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"  -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Get backend url
          working_directory: ./frontend
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> .env
            cat .env
      - run:
          name: Deploy frontend objects
          working_directory: ./frontend
          command: |
            npm install 
            npm run build 
            aws s3 cp ./dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      - persist_to_workspace:
          root: .
          paths:
            - frontend/dist


  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:  [15:70:09:55:91:96:ae:52:1b:55:c0:9f:48:9d:26:2a]
      - run:
          name: Install dependencies and deploy backend
          no_output_timeout: 20m
          command: |
            apk add --update ansible curl rsync openssh nodejs npm git
            ansible --version 
            git  --version 
            pip install awscli 
            aws --version 
            echo "list all files and dir"
            cd backend
            npm install 
            npm run build
            cd -
            # Zip the directory 
            tar -C backend -czvf artifact.tar.gz 
            ls
            pwd
            cd /root/project/circle.ci/ansible
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text >> inventory.txt 
            cat inventory.txt 
            ansible-playbook -i inventory.txt deploy-backend.yml -vvv
      
  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          working_directory: /tmp
          command: |
            apk add --update  curl nodejs npm
            pip install awscli
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            if curl "${API_URL}/api/status"  | grep "ok"
            then 
                return 0
            else
                return 1
            fi 
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${URL}
            if curl -s ${URL} | grep "welcome"
            then 
                return 1
            else 
                return 1
            fi 
            destroy_enviroment:
      

  
        
          
          
      


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend: 
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: 
                - master
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
          filters:
             branches:
               only: 
                 - master
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
  
                
                
